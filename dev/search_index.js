var documenterSearchIndex = {"docs":
[{"location":"anotherPage.html#Detailed-API","page":"An other page","title":"Detailed API","text":"","category":"section"},{"location":"anotherPage.html","page":"An other page","title":"An other page","text":"Modules = [EISAnalysis]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"anotherPage.html#EISAnalysis.CPE","page":"An other page","title":"EISAnalysis.CPE","text":"CPE(Q,n,ω,Z)\n\nStruct for storing CPE information.\n\n#Attributes\n\nQ: CP capacitance\nn: CP phase angle\nω: EIS frequencies\nZ: EIS impedance\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#EISAnalysis.Capacitor","page":"An other page","title":"EISAnalysis.Capacitor","text":"Capacitor(C,ω,Z)\n\nStruct for storing resistor information.\n\nAttributes\n\nC: Capacitance \nω: EIS frequencies\nZ: EIS impedance\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#EISAnalysis.Circuit","page":"An other page","title":"EISAnalysis.Circuit","text":"Circuit\n\nStruct for storing information about circuits\n\nAttributes\n\nω: EIS frequencies\nZ: EIS Impedances\nelements: List of circuit elements. Also stores paramter information.\noperators: List of operators (-,/) between elements\norder: Order of operations\nsubcircuits: List of subcircuits\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#EISAnalysis.Inductor","page":"An other page","title":"EISAnalysis.Inductor","text":"Inductor(L,ω,Z)\n\nStruct for storing inductor information.\n\nAttributes\n\nL: Inductance\nω: EIS frequencies\nZ: EIS impedance\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#EISAnalysis.Resistor","page":"An other page","title":"EISAnalysis.Resistor","text":"Resistor(R,ω,Z)\n\nStruct for storing resistor information.\n\nAttributes\n\nR: Resistance\nω: EIS frequencies\nZ: EIS impedance\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#EISAnalysis.Warburg","page":"An other page","title":"EISAnalysis.Warburg","text":"Warburg(type,A,B,ω,Z)\n\nStruct for storing Warburg information.\n\nCan be either short or open, depending on type.\n\n#Attributes\n\ntype: Warburg type (\"short\" or \"open\")\nA: Warburg impedance parameter\nB: Warburg exponential parameter\nω: EIS frequencies\nZ: EIS impedance\n\n\n\n\n\n","category":"type"},{"location":"anotherPage.html#Base.:*-Tuple{Real, EISAnalysis.Resistor}","page":"An other page","title":"Base.:*","text":"Base.*(a::Real,b::CircuitElement)\n\nMutates the impedance parameter of CircuitElements.\n\nArguments\n\na::Real: Impedance parameter value\nb::CircuiElement: Circuit element \n\n#Examples\n\nusing EISAnalysis\neval(initialize())\ntwor = 2r\ntwor.R == 2*r.R\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#Base.:--Tuple{EISAnalysis.CircuitElement, EISAnalysis.Circuit}","page":"An other page","title":"Base.:-","text":"-(a::Union{Circuit,CircuitElement},b::Union{Circuit,CircuitElement})\n\nHolds the inputs in series and generates a Circuit.\n\nOperates over Circuits and CircuitElements.\n\nArguments\n\na::Union{Circuit,CircuitElement}: circuit or circuit element to hold in series with b\nb::Union{Circuit,CircuitElement}: circuit or circuit element to hold in series with a\n\n#Examples\n\nusing EISAnalysis\neval(initialize())\ncircuit1 = r-c\ncircuit2 = circuit1-c\ncircuit2.Z == (r-c-c).Z == (r-0.5c).Z\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#Base.:/-Tuple{EISAnalysis.CircuitElement, EISAnalysis.Circuit}","page":"An other page","title":"Base.:/","text":"Base./(a::Union{Circuit,CircuitElement},b::Union{Circuit,CircuitElement})\n\nHolds the inputs in parallel and generates a Circuit.\n\nOperates over Circuits and CircuitElements.\n\nArguments\n\na::Union{Circuit,CircuitElement}: circuit or circuit element to hold in parallel with b\nb::Union{Circuit,CircuitElement}: circuit or circuit element to hold in parallel with a\n\n#Examples\n\nusing EISAnalysis\neval(initialize())\ncircuit1 = r/c\ncircuit2 = circuit1/c;\ncircuit2.Z == ((r/c)/c).Z\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#Base.:^-Tuple{EISAnalysis.CPE, Real}","page":"An other page","title":"Base.:^","text":"Base.^(a::CircuitElement,b::Real)\n\nMutates the exponent parameter of CPE's and Warburgs.\n\nArguments\n\na::CircuiElement: circuit or circuit element to hold in series with a\nb::Real: Exponential parameter value\n\n#Examples\n\nusing EISAnalysis\neval(initialize())\ncircuit = q-wo \nprint_circuit(circuit)\ncircuit2 = q^0.6-wo^5;\nprint_circuit(circuit2)\n\n# output\n\n1.0 * q ^ 0.8\n1.0 * wo ^ 1.0\n1.0 * q ^ 0.6\n1.0 * wo ^ 5.0\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#Base.:~-Tuple{EISAnalysis.Resistor, Vector{Float64}}","page":"An other page","title":"Base.:~","text":"Base.~(a::Union{CircuitElement,Circuit},ω::Vector{Float64})\n\nMaps the frequencies over which impedance is calculated to the desired frequency.\n\nOperates over Circuits and CircuitElements.\n\nArguments\n\n-a: Circuit element or circuit -ω: Frequencies to map to\n\nExamples\n\nω = [0.1,1,10]\nusing EISAnalysis\neval(initialize());\ncircuit = r/c ~ω; println(circuit.ω,circuit.Z)\n\n# output\n\nReal[0.1, 1.0, 10.0]ComplexF64[0.9900990099009901 - 0.09900990099009901im, 0.5 - 0.5im, 0.009900990099009903 - 0.09900990099009901im]\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.build_Z_matrices-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.build_Z_matrices","text":"build_Z_matrices(ω_in,ω_out)\n\nBuilds the matrices (real + imaginary) through which impedance is calculated.\n\nSee compute_drt, optimize_lambda, and tune_τ\n\n#Attributes\n\nω_in: The input EIS frequencies\nω_out: he desired output frequencies for computing DRT\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.circuit_fit-Tuple{Any, Any, Any}","page":"An other page","title":"EISAnalysis.circuit_fit","text":"circuit_fit(circuit, ω_data,Z_data)\n\nMain function for fitting a Circuit to EIS data.\n\nThe initial guess is passed implicitly through the circuit definition. E.g.     randles_circuit = 0.23r-(r-0.025wo^80)/0.2c     # p0 = [0.23,1.0,(0.025,80),0.2]\n\nAttributes\n\ncircuit: Circuit for fitting\nω_data: EIS frequencies\nZ_data: EIS impedance\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.compute_drt-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.compute_drt","text":"compute_drt(ω_exp,Z_exp;ppd,showplot,rtol,regularization)\n\nMain function for computing the DRT from input EIS data.\n\nAttributes\n\nω_exp: Input EIS frequency\nZ_exp: Input EIS Impedance\nppd=7: Points-per-decade in output τ range for computing DRT\nshowplot=false: Whether or not to plot DRT results\nrtol=1e-03: The desired relative tolerance. Function outputs a warning if the fit result is above this\nregularization=false: Whether or no to employ the regularization method\n\nExamples\n\nusing EISAnalysis, Statistics\neval(initialize())\nω_exp, Z_exp = (r/q).ω, (r/q).Z #replace this with real data\nfit = compute_drt(ω_exp,Z_exp;showplot = false,regularization = true)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.drt_Z-Tuple{Any, Any, Any}","page":"An other page","title":"EISAnalysis.drt_Z","text":"drt_Z(X_r,X_i,p)\n\nUses Z matrices to compute impedance for least-squares fit.\n\nAttributes\n\nX_r: The real Z matrix for computing impedance\nX_i: The imaginary Z matrix for computing impedance\np: The parameter list\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.drt_Z_regular-NTuple{6, Any}","page":"An other page","title":"EISAnalysis.drt_Z_regular","text":"drt_Z_regular(X_r,X_i,Y_r,Y_i,λ,p_reg)\n\nSee drt_Z. Incorporates regularization in least-squares minimization.\n\nSince LsqFit minimizes Σ|Xᵢ-Yᵢ|², this function generates A such that     |Aᵢ-Yᵢ|² = |Xᵢ-Yᵢ|² + (λ/N)|p|²     Aᵢ = Yᵢ+√(|Xᵢ-Yᵢ|²+(λ/N)|p|²) where N is the length of the vectors. Since the Real component carries  the extra parameter (R0), two different functionsare defined for the real  and imaginary components.Used for regularization method of computing DRT.\n\nAttributes\n\nX_r: The real Z matrix for computing impedance\nX_i: The imaginary Z matrix for computing impedance\nY_r: The real component of input impedance data\nY_i: The imaginary component of input impedance data\nλ: The regularization hyperparameter\np_reg: The parameter list\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.drt_Zimag_regular-NTuple{4, Any}","page":"An other page","title":"EISAnalysis.drt_Zimag_regular","text":"drt_Zimag_regular(X_i,Y_i,λ,p_reg)\n\nSee drt_Z_regular. Outputs the imaginary component.\n\nThe only difference with drtZrealregular() is ignoring the series resistance. Used for crossvalidation in optimize_lambda.\n\nAttributes\n\nX_i: The imaginary Z matrix for computing impedance\nY_i: The imaginary component of input impedance data\nλ: The regularization hyperparameter\np_reg: The parameter list\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.drt_Zreal_regular-NTuple{4, Any}","page":"An other page","title":"EISAnalysis.drt_Zreal_regular","text":"drt_Zreal_regular(X_r,Y_r,λ,p_reg)\n\nSee drt_Z_regular. Outputs the real component.\n\nUsed for crossvalidation in optimize_lambda.\n\nAttributes\n\nX_r: The real Z matrix for computing impedance\nY_r: The real component of input impedance data\nλ: The regularization hyperparameter\np_reg: The parameter list\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.evaluate_Z-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.evaluate_Z","text":"evaluate_Z(f_r,f_c)\n\nComputes elements for Z_matrices. The function based on impedance of an RC Circuit\n\nArguments\n\nf_r: The Z_matrix row frequency\nf_c: The Z_matrix column frequency\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.get_params-Tuple{EISAnalysis.Resistor}","page":"An other page","title":"EISAnalysis.get_params","text":"get_params(a::Union{CircuitElement,Circuit})\n\nGets the parameters for elements in a circuit.\n\nAttributes\n\na::Union{CircuitElement,Circuit}: The circuit or circuit element\n\nExamples\n\nusing EISAnalysis\neval(initialize())\nrandles_circuit = 0.23r-(r-0.025wo^80)/0.2q\nget_params(randles_circuit)\n\n# output\n\n4-element Vector{Any}:\n 0.23\n 1.0\n  (0.025, 80.0)\n  (0.2, 0.8)\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.get_subcircuit-Tuple{Any, Any, Any}","page":"An other page","title":"EISAnalysis.get_subcircuit","text":"get_subcircuit(subelements,suboperators,suborder)\n\nCreates a circuit from a subcircuit.\n\nUsed in rebuild. Currently a bit sloppy.\n\nAttributes\n\nsubelements: elements of subcircuit\nsuboperators: operators of subcircuit\nsuborder: operation order of subcircuit\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.get_symbol-Tuple{EISAnalysis.Resistor}","page":"An other page","title":"EISAnalysis.get_symbol","text":"get_symbol(a::CircuitElement)\n\nCreates the symbol (technically expressions) for a circuit element, using globally defined variables.\n\nUsed for generating the elements field of a circuit.\n\nAttributes\n\na::CircuitElement: The circuit element\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.initialize-Tuple{}","page":"An other page","title":"EISAnalysis.initialize","text":"initialize()\n\nGenerates all the circuit elements for ease of use in building circuits.\n\nIt adds the following variables to your environment     r = Resistor()     c = Capacitor()     l = Inductor()     q = CPE()     wo = Warburg(\"open\")     ws = Warburg(\"short\") From here you can quickly build circuits and adjust the parameters directly  using the overloaded * and ^ operators as desired\n\nExamples\n\nusing EISAnalysis\neval(initialize())\nprint(r.R)\n\n# output\n\n1.0\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.optimize_lambda-Tuple{Any, Any, Any}","page":"An other page","title":"EISAnalysis.optimize_lambda","text":"optimize_lambda(ω_exp,Z_exp,τ)\n\nGenerates the optimal regularization hyperparameter for compute_drt.\n\nAttributes\n\nω_exp: Input EIS frequency\nZ_exp: Input EIS Impedance\nτ: Desired relaxation times for computing DRT: generated in compute_drt\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.plot_Nyquist!-Tuple{Any, Vararg{EISAnalysis.Circuit}}","page":"An other page","title":"EISAnalysis.plot_Nyquist!","text":"plot_Nyquist!(plt,a;label)\n\nAdds circuits to pre-existing Nyquist plot\n\nArguments\n\nplt: The input Nyquist plot to manipulate\na::Circuit: The circuits to add to the Nyquist plot\nlabel: kwarg label for plot\n\nExamples\n\njulia> using EISAnalysis\njulia> eval(initialize());\njulia> circuit1 = r-r/c;\njulia> circuit2 = r-r/q;\njulia> plot_Nyquist(circuit1,circuit2;label= [\"R-C Circuit\",\"R-CPE Circuit\"]);\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.plot_Nyquist-Tuple{Vararg{EISAnalysis.Circuit}}","page":"An other page","title":"EISAnalysis.plot_Nyquist","text":"plot_Nyquist(a;label)\n\nCreates a Nyquist plot\n\nArguments\n\na::Circuit: The circuits to add to the Nyquist plot\nlabel: kwarg label for plot\n\nExamples\n\njulia> using EISAnalysis\njulia> eval(initialize());\njulia> circuit1 = r-r/c;\njulia> circuit2 = r-r/q;\njulia> plot_Nyquist(circuit1,circuit2;label= [\"R-C Circuit\",\"R-CPE Circuit\"]);\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.print_circuit-Tuple{Any}","page":"An other page","title":"EISAnalysis.print_circuit","text":"print_circuit(circuit)\n\nPrints the elements of a circuit along with its parameters\n\nArguments\n\ncircuit::Circuit: The circuit being printed\n\nExamples\n\nusing EISAnalysis\neval(initialize())\nrandles_circuit = 0.23r-r/0.2q\nprint_circuit(randles_circuit)\n\n# output \n\n0.23r\n1.0r\n0.2 * q ^ 0.8\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.rebuild-Tuple{Any}","page":"An other page","title":"EISAnalysis.rebuild","text":"rebuild(circuit::Circuit)\n\nMain function for recalculating a circuit's impedance.\n\nUsed after mutating a circuit through either ~ or set_params\n\nAttributes\n\ncircuit: Mutated circuit to be rebuilt\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.regularizer-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.regularizer","text":"regularizer(p,λ)\n\nComputes the regularization of parameters. Used in regularization method of computing DRT.\n\nSee drt_Z_regular,drt_Zimag_regular, and drt_Zreal_regular\n\n#Arguments\n\np: The parameter list \nλ: Regularization hyperparameter\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.set_params-Tuple{EISAnalysis.Resistor, Any}","page":"An other page","title":"EISAnalysis.set_params","text":"set_params(a::Union{CircuitElement,Circuit})\n\nSets the parameters for elements in a circuit. \n\nCurrently a bit sloppy.Used in circuit_fit\n\nAttributes\n\na::Union{CircuitElement,Circuit}: The circuit or circuit element\np: The parameter list. Needs to carry tuples for elements with two parameters\n\nExamples\n\nusing EISAnalysis\neval(initialize());\ncircuit = r-r/q;\np = [0.5,2,(0.5,0.9)]\nupdated_circuit = EISAnalysis.set_params(circuit,p)\nprint_circuit(updated_circuit)\n\n# output\n\n0.5r\n2.0r\n0.5 * q ^ 0.9\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.tune_τ-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.tune_τ","text":"tune_τ(ω_exp,Z_exp;ppd,tol)\n\nGenerates the optimal τ range for computing DRT.\n\nCurrently incomplete. Would be used in compute_drt\n\nAttributes\n\nω_exp: Input EIS frequency\nZ_exp: Input EIS Impedance\nppd: Points-per-decade in output τ range for computing DRT\ntol=1e-03: Tolerance for finding τ bounds where DRT impedance is sufficiently small\n\n\n\n\n\n","category":"method"},{"location":"anotherPage.html#EISAnalysis.unflatten_parameters-Tuple{Any, Any}","page":"An other page","title":"EISAnalysis.unflatten_parameters","text":"unflatten_parameters(pflat,tuples)\n\nShapes parameter list to feed into Circuit. See circuit_fit\n\nLsqFit.curvefit requires a parameter list that is flat, but setparams may require a parameter list with tuples. This function unflattens parameter list to feed to set_params.\n\nAttributes\n\npflat: Flat parameter list\ntuples: List of tuple indices for unflattened parameter list\n\n\n\n\n\n","category":"method"},{"location":"index.html#EISAnalysis.jl","page":"Index","title":"EISAnalysis.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for EISAnalysis.jl","category":"page"}]
}
